import axios from 'axios';

// Configuration de l'API OpenAI
const openaiAPI = axios.create({
    baseURL: 'https://api.openai.com/v1',
    headers: {
        'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
    }
});

// Fonction pour extraire les titres des chansons depuis la réponse OpenAI
const extractTrackNames = (openaiResponse) => {
    console.log("Réponse brute d'OpenAI:", openaiResponse);

    // Utilisation d'une regex pour extraire les titres de chansons entre guillemets
    const trackList = openaiResponse.match(/"([^"]+)"/g);

    // Vérification si des titres ont été extraits
    if (trackList) {
        const cleanedTracks = trackList.map(track => track.replace(/"/g, '')); // Retire les guillemets
        console.log("Titres extraits:", cleanedTracks);
        return cleanedTracks;
    }

    console.log("Aucun titre n'a été extrait.");
    return [];
};

// Fonction pour générer une playlist via OpenAI
export const generatePlaylist = async (personalityData) => {
    try {
        // Envoie la requête à OpenAI
        const response = await openaiAPI.post('/chat/completions', {
            model: 'gpt-4',
            messages: [
                { role: 'system', content: 'You are a music recommender AI.' },
                { role: 'user', content: `Create a playlist for a person with the following personality traits: ${personalityData}.` }
            ],
            max_tokens: 100
        });

        // Récupération de la réponse textuelle d'OpenAI
        const openaiText = response.data.choices[0].message.content;
        console.log("Texte généré par OpenAI:", openaiText);

        // Extraction des titres de chansons
        const trackNames = extractTrackNames(openaiText);
        return trackNames;

    } catch (error) {
        console.error('Erreur lors de la génération de la playlist avec OpenAI:', error);
        throw error;
    }
};

// Fonction pour créer une playlist sur le compte Spotify de l'utilisateur
export const createSpotifyPlaylist = async (accessToken, userId, trackUris) => {
    const currentDate = new Date().toISOString().split('T')[0]; // Format YYYY-MM-DD
    const playlistName = `PL ${currentDate}`;

    try {
        // Crée une nouvelle playlist sur le compte de l'utilisateur
        const playlistResponse = await axios.post(`https://api.spotify.com/v1/users/${userId}/playlists`, {
            name: playlistName,
            description: 'Generated by AI based on your personality.',
            public: false // Peut être true ou false en fonction de ta préférence
        }, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });

        const playlistId = playlistResponse.data.id;
        console.log('Playlist créée:', playlistResponse.data);

        // Ajoute les titres à la playlist nouvellement créée
        await axios.post(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
            uris: trackUris
        }, {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });

        console.log(`Titres ajoutés à la playlist ${playlistName}`);
    } catch (error) {
        console.error('Erreur lors de la création de la playlist Spotify:', error);
        throw error;
    }
};

// Fonction pour récupérer l'utilisateur connecté à Spotify
export const getSpotifyUserProfile = async (accessToken) => {
    try {
        const response = await axios.get('https://api.spotify.com/v1/me', {
            headers: {
                'Authorization': `Bearer ${accessToken}`
            }
        });
        console.log('Utilisateur Spotify connecté:', response.data);
        return response.data;
    } catch (error) {
        console.error('Erreur lors de la récupération du profil utilisateur Spotify:', error);
        throw error;
    }
};

// Fonction pour chercher des titres sur Spotify (recherche basée sur les noms)
export const getSpotifyTrackUris = async (trackNames, accessToken) => {
    const trackUris = [];

    for (let i = 0; i < trackNames.length; i++) {
        const trackName = trackNames[i];
        console.log(`Recherche de la chanson sur Spotify : "${trackName}"`);

        try {
            const response = await axios.get(`https://api.spotify.com/v1/search?q=${encodeURIComponent(trackName)}&type=track&limit=1`, {
                headers: {
                    'Authorization': `Bearer ${accessToken}`
                }
            });

            if (response.data.tracks.items.length > 0) {
                const trackUri = response.data.tracks.items[0].uri;
                trackUris.push(trackUri);
                console.log(`Track URI trouvé: ${trackUri}`);
            } else {
                console.log(`Aucun résultat trouvé pour: ${trackName}`);
            }
        } catch (error) {
            console.error(`Erreur lors de la recherche du titre: ${trackName}`, error);
        }
    }

    return trackUris;
};
